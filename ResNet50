import torch
import torchvision
from torchvision import transforms, models
from torch.utils.data import Dataset, DataLoader
import cv2
import pandas as pd
from sklearn.model_selection import train_test_split
from collections import Counter
import numpy as np

# Load the CSV file that contains the processed image paths and labels
csv_file = "/home/nemolinux/Python/sam2/notebooks/Machine Learning model/Model/processed_image_labels.csv"
df = pd.read_csv(csv_file)

# Ensure labels are treated as integers
df['label'] = df['label'].astype(int)

# Check class distribution
label_counts = Counter(df['label'])
print("Label distribution before filtering:", label_counts)

# Keep only labels with at least 2 samples
valid_labels = {label for label, count in label_counts.items() if count > 1}
df_filtered = df[df['label'].isin(valid_labels)]

# Apply mapping AFTER filtering, ensuring contiguous indices
unique_labels_after_filtering = sorted(set(df_filtered['label']))
new_label_mapping = {old_label: new_idx for new_idx, old_label in enumerate(unique_labels_after_filtering)}
df_filtered['label'] = df_filtered['label'].map(new_label_mapping)

# Print unique labels after remapping
print("Unique labels after filtering and remapping:", sorted(set(df_filtered['label'])))

# Update lists
image_paths = df_filtered['image_path'].tolist()
labels = df_filtered['label'].tolist()

# Ensure dataset is not empty after filtering
if not labels:
    raise ValueError("No valid samples found after filtering. Ensure dataset contains enough samples per class.")

# Compute num_classes AFTER filtering
num_classes = len(set(labels))
print(f"Final number of classes: {num_classes}")

# Ensure labels are within range [0, num_classes - 1]
assert max(df_filtered['label']) < num_classes, "Error: Labels exceed expected class range!"

# Split the dataset (without stratification if needed)
try:
    train_paths, test_paths, train_labels, test_labels = train_test_split(
        image_paths, labels, test_size=0.2, random_state=42, stratify=labels
    )
except ValueError as e:
    print(f"⚠️ Warning: {e}")
    print("Using train_test_split without stratification.")
    train_paths, test_paths, train_labels, test_labels = train_test_split(
        image_paths, labels, test_size=0.2, random_state=42, stratify=None
    )

# Verify the split
print(f"Training data size: {len(train_paths)}")
print(f"Testing data size: {len(test_paths)}")


# Custom PyTorch Dataset
class ParticleDataset(Dataset):
    def __init__(self, image_paths, labels, transform=None):
        self.image_paths = image_paths
        self.labels = labels
        self.transform = transform
    
    def __len__(self):
        return len(self.image_paths)
    
    def __getitem__(self, idx):
        img_path = self.image_paths[idx]
        label = self.labels[idx]

        image = cv2.imread(img_path)
    
        if image is None:
            print(f"⚠️ Warning: Image not found at path: {img_path}")  # Debugging print
            return torch.zeros((3, 224, 224)), torch.tensor(label, dtype=torch.long)  # Return blank tensor

        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  

        if self.transform:
            image = self.transform(image)   # Apply transformations
        return image, torch.tensor(label, dtype=torch.long)

import torchvision.transforms as transforms


# Define image transformations
transform = transforms.Compose([
    transforms.ToPILImage(),
    transforms.Resize((224, 224)),
    transforms.RandomHorizontalFlip(),
    transforms.RandomRotation(15),
    transforms.RandomAffine(degrees=30, translate=(0.1, 0.1)),
    transforms.RandomResizedCrop(224),
    transforms.ColorJitter(brightness=0.2, contrast=0.2),
    transforms.RandomPerspective(distortion_scale=0.2, p=0.5),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

# Create training and testing datasets
train_dataset = ParticleDataset(train_paths, train_labels, transform)
test_dataset = ParticleDataset(test_paths, test_labels, transform)

# Create DataLoader for training and testing datasets
train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=16, shuffle=False)

# Check for GPU availability
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Using device: {device}")




### ✅ REPLACING CNN WITH RESNET18 ✅ ###
# Load pretrained ResNet50 model
model = models.resnet50(pretrained=True)

# Modify the last fully connected (fc) layer for classification
num_ftrs = model.fc.in_features
model.fc = torch.nn.Linear(num_ftrs, num_classes)

# Move model to GPU (if available)
model = model.to(device)    

# Define loss function and optimizer
filtered_label_counts = Counter(df_filtered['label'])  # Compute label counts AFTER filtering
class_weights = torch.tensor([1.0 / filtered_label_counts[l] for l in sorted(filtered_label_counts.keys())], dtype=torch.float32).to(device)
criterion = torch.nn.CrossEntropyLoss(weight=class_weights)
optimizer = torch.optim.Adam(model.parameters(), lr=0.0001, weight_decay=0.001)
scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', patience=2, factor=0.5, min_lr=1e-6)


for param in model.layer4.parameters():
    param.requires_grad = True

# Or unfreeze the last two blocks
for param in model.layer3.parameters():
    param.requires_grad = True



# Early Stopping Class
class EarlyStopping:
    def __init__(self, patience=5, min_delta=0):
        self.patience = patience
        self.min_delta = min_delta
        self.best_loss = np.inf
        self.counter = 0
        self.early_stop = False

    def __call__(self, val_loss):
        if val_loss < self.best_loss - self.min_delta:
            self.best_loss = val_loss
            self.counter = 0
        else:
            self.counter += 1
            if self.counter >= self.patience:
                self.early_stop = True


# Define EarlyStopping
early_stopping = EarlyStopping(patience=5, min_delta=0.001)

# Training loop with early stopping
for epoch in range(40):
    model.train()
    total_loss = 0
    for images, labels in train_loader:
        images, labels = images.to(device), labels.to(device)
        
        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        total_loss += loss.item()
    
    print(f"Epoch {epoch + 1}, Loss: {total_loss / len(train_loader):.4f}")
    
    # Validation phase
    model.eval()
    val_loss = 0
    with torch.no_grad():
        for images, labels in test_loader:
            images, labels = images.to(device), labels.to(device)
            outputs = model(images)
            loss = criterion(outputs, labels)
            val_loss += loss.item()
    
    val_loss /= len(test_loader)
    print(f"Validation Loss after Epoch {epoch + 1}: {val_loss:.4f}")
    
    # Check early stopping
    early_stopping(val_loss)
    if early_stopping.early_stop:
        print("Early stopping triggered.")
        break

# Save the model after training
torch.save(model.state_dict(), 'particle_classifier_resnet50.pth')

# Evaluate training accuracy
model.eval()
correct = 0
total = 0
with torch.no_grad():
    for images, labels in train_loader:
        images, labels = images.to(device), labels.to(device)
        outputs = model(images)
        _, predicted = torch.max(outputs, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

print(f"Training Accuracy: {100 * correct / total:.2f}%")

# Evaluate testing accuracy
correct = 0
total = 0
model.eval()  # Set model to evaluation mode
with torch.no_grad():
    for images, labels in test_loader:
        images, labels = images.to(device), labels.to(device)  # Move to GPU if available
        outputs = model(images)
        _, predicted = torch.max(outputs, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

print(f"Test Accuracy: {100 * correct / total:.2f}%")
